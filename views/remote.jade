extends layout

block content
    include header.jade
    include sidebar.jade
    .container-fluid
        - if (remote.length)
            .row
                .col-xl-3.col-lg-offset-2
                    .cliente
                        h3 RW-Information
                        .row
                            .col-sm-3 Pc:
                            .col-sm-3 #{remote[0].a_number}
                        .row
                            .col-sm-3 IP:
                            .col-sm-3 #{remote[0].hw.pc_ip}
                        .row
                            .col-sm-3 Mac:
                            .col-sm-3 #{remote[0].hw.pc_mac}
                        .row
                            .col-sm-3 Status:
                            .col-sm-3
                                strong
                                    !{remote[0].state}
                .col-xl-4
                    .cliente
                        h3 Peripherie Information
                        .row
                            .col-sm-5.col-md-5.col-lg-7 PowerStripe:
                            .col-sm-5.col-md-2 #{remote[0].hw.powerstripe_ip}
                        .row
                            .col-sm-5.col-md-5.col-lg-7 RemoteBox Softwareversion:
                            .col-sm-5.col-md-2 #{remote[0].hw.sw_version}
                        .row
                            .col-sm-5.col-md-5.col-lg-7 RemoteBox Hardwareversion:
                            .col-sm-5.col-md-2 #{remote[0].hw.hw_version}
            .row
                .col-xl-7.col-lg-offset-2
                    .cliente
                        h3 Admin
                            .container-fluid
                                .row
                                    .col-xs-2.col-sm-2.col-md-2
                                        label.form-control(style="width:150px") Logout User:
                                    .col-sm-2
                                        button.btn.btn-default.btn-md(type='button' style="width:150px") LogOut
                                    .col-sm-2
                                        label.form-control(style="width:150px")  Shutdown PC:
                                    .col-sm-2
                                        button.btn.btn-default.btn-md(type='button' style="width:150px") Shutdown
                                    .col-sm-2
                                        label.form-control(style="width:150px")  Restart PC:
                                    .col-sm-2
                                        button.btn.btn-default.btn-md(type='button' style="width:150px") Restart
                                .row
                                    .col-sm-2
                                        label.form-control(style="width:150px")  Status RW:
                                    .col-sm-2(style="margin-top: 2px;")
                                        //Hier wird der Status des PC's gesetzt. Es wird sehr umständlich geprüft welcher status nun als selected angezeigt werden muss
                                        select#stateOfRemoteWorkstation.form-control(style="width:150px" onchange="window.location.href=this.value")
                                            if(remote[0].state == "Defect")
                                                option(value="/#{remote[0]._id}/Defect/edit" selected) Defect
                                            else
                                                option(value="/#{remote[0]._id}/Defect/edit") Defect
                                            if(remote[0].state == "On")
                                                option(value="/#{remote[0]._id}/On/edit" selected) On
                                            else
                                                option(value="/#{remote[0]._id}/On/edit") On
                                            if(remote[0].state == "Offline")
                                                option(value="/#{remote[0]._id}/Offline/edit" selected) Offline
                                            else
                                                option(value="/#{remote[0]._id}/Offline/edit") Offline
                                            if(remote[0].state == "Maintance")
                                                option(value="/#{remote[0]._id}/Maintance/edit" selected) Maintance
                                            else
                                                option(value="/#{remote[0]._id}/Maintance/edit") Maintance

            .row
                .col-xl-7.col-lg-offset-2
                    .cliente
                        h3 Control
                            .container-fluid
                                .row
                                    //Sortieren nach Gruppe
                                    - var test = remote[0].buttons.sort(function(a,b){ if(a.group < b.group) return -1; if(a.group > b.group) return 1; return 0; })
                                    - var lastGroup = "";
                                    each b in remote[0].buttons
                                        - console.log(lastGroup)
                                        - console.log(b.group)
                                        - if(String(Lastgroup) !== String(b.group))
                                            .row
                                                .col-sm-2 #{b.group}
                                                    input(type='checkbox', data-label-text='#{b.name}', name='my-checkbox', onchange='OnClickCommandButton(event,"#{b.type}","#{b.index}","#{b.pin}");')
                                        - else
                                            .col-sm-2 #{b.group}
                                                input(type='checkbox', data-label-text='#{b.name}', name='my-checkbox', onchange='OnClickCommandButton(event,"#{b.type}","#{b.index}","#{b.pin}");')
                                        - lastGroup = b.group;
            .row
                .col-xl-7.col-lg-offset-2
                    .cliente
                        h3 Flash history
                        - if(history.length)
                            table.table
                                thead
                                    tr
                                        th User
                                        th Time
                                        th Bootloader
                                        th AC
                                        th GC
                                tbody
                                    each t in history
                                        tr
                                            td
                                                each val in users
                                                    p #{(String(t.user) == String(val._id)) ? String(val.user) : ""}
                                            - function GetTime(time){ console.log(time);  var date = new Date(time); var day = date.toTimeString(); var hours = date.getHours();var minutes = "0" + date.getMinutes();var seconds = "0" + date.getSeconds();var formattedTime = date.toISOString();return formattedTime;}
                                            td #{GetTime(t.time)}
                                            td #{t.bootloader}
                                            td #{t.ac}
                                            td #{t.gc}
                        - else
                            .row
                                .col-sm-3 "No history entries available"
            .row
                .col-sm-3.col-sm-offset-3.col-md-9.col-md-offset-2
                    #container(style='width:100%; height:400px;')
            .row
                .col-sm-9.col-sm-offset-3.col-md-10.col-md-offset-2.main
                    include log.jade
        -else
            .row
                .col-sm-3.col-sm-offset-0.col-md-4.col-md-offset-2
                    .client "No entry available"

    script(src='https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js')
    script(src='javascripts/tether.min.js')
    script(src='javascripts/bootstrap.min.js')
    script(src='javascripts/bootstrap-switch.min.js')
        // Just to make our placeholder images work. Don't actually copy the next line!
    script(src='javascripts/vendor/holder.min.js')
        // IE10 viewport hack for Surface/desktop Windows 8 bug
    script(src='javascripts/ie10-viewport-bug-workaround.js')
    script(src='javascripts/jquery.dataTables.js')
    script(src='javascripts/dataTables.bootstrap4.min.js')
    script(type='text/javascript', charset='utf-8').
        $(document).ready(function () {
            $('#example').DataTable();
        });
    script(src='http://code.highcharts.com/highcharts.js')
    //script(src='javascripts/socket.io.js')

    script.
        $("input[type=\"checkbox\"], input[type=\"radio\"]").not("[data-switch-no-init]").bootstrapSwitch();
        $("input[type=\"checkbox\"], input[type=\"radio\"]").onclick
        function OnClickCommandButton(event, Type,Index,Pin)
        {

            alert(e.state());
            switch(Type.toUpperCase())
            {
                case "USB":
                    Command(2,"WEB","SERVICE","SET",[Index,Pin])
                    break;
                case "IO":
                    break;
                case "RELAY":
                    break;
                case "ADC":
                    break;
                case "DAC":
                    break;
                case "POWERSUPPLY":
                    break;
                case "POWERSTRIPE":
                    break;
                default:
                    break;
            }
        };


        var arr = new Array();
        var arr2 = new Array();
        var loopCounter = #{logs.length};
        var rankArray = !{JSON.stringify(logs)};
        for (var i = 0; i < loopCounter; i++)
        {
            var t = rankArray[i];
            var y = JSON.stringify(t);
            var obj = JSON.parse(y);
            if(obj.loggerLvl == "info")
            {
                var date  = new Date(obj.time);
                var dateUTC = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDay(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
                if(obj.message == JSON.parse('"WTS_SESSION_LOGON"')) {
                    arr.push([dateUTC,0]);
                }
                else if(obj.message == JSON.parse('"WTS_SESSION_LOGOFF"'))
                    arr.push([dateUTC,1]);
                else if (obj.message == JSON.parse('"WTS_SESSION_LOCK"'))
                    arr.push([dateUTC,2]);
                else if (obj.message == JSON.parse('"WTS_SESSION_UNLOCK"'))
                    arr.push([dateUTC,3]);
                else if (obj.message == JSON.parse('"WTS_CONSOLE_CONNECT"'))
                    arr.push([dateUTC,4]);
                else if (obj.message == JSON.parse('"WTS_CONSOLE_DISCONNECT"'))
                    arr.push([dateUTC,5]);
                else if (obj.message == JSON.parse('"WTS_REMOTE_CONNECT"'))
                    arr.push([dateUTC,6]);
                else if (obj.message == JSON.parse('"WTS_REMOTE_DISCONNECT"'))
                    arr.push([dateUTC,7]);
            }
        }

        $(function () {
            $('#container').highcharts({
                chart: {
                    zoomType: 'x'
                },
                title: {
                    text: 'Session change overview'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150,
                },
                yAxis: {
                    title: {
                        text: 'Type of session change'
                    },
                    categories: ['WTS_SESSION_LOGON', 'WTS_SESSION_LOGOFF', 'WTS_SESSION_LOCK','WTS_SESSION_UNLOCK','WTS_CONSOLE_CONNECT','WTS_CONSOLE_DISCONNECT','WTS_REMOTE_CONNECT','WTS_REMOTE_DISCONNECT']
                },
                plotOptions: {
                    spline: {
                        marker: {
                            enabled: true
                        }
                    }
                },
                series: [{
                    name: 'passage of time',
                    // Define the data points. All series have a dummy year
                    // of 1970/71 in order to be compared on the same x axis. Note
                    // that in JavaScript, months start at 0 for January, 1 for February etc.
                    data: arr
                }]
            });
        });
        var ws = new WebSocket('ws://localhost:1234');

        class Command
        {
            constructor(CmdId,Src,Dst,ExecutionVariant,Param)
            {
                this.cmdid = CmdId;
                this.src = Src;
                this.dst = Dst;
                this.executionvariant = ExecutionVariant;
                this.params = Param;
            }

            set CmdID(Id)
            {
                this.cmdid = Id;
            }

            /*
            * @return {number}
            */
            get CmdID(){
                return this.cmdid;
            }

            /*
             * @return {string}
             */
            get Src() {
                return this.src;
            }

            /*
             * @return {string}
             */
            get Dst() {
                return this.executionvariant;
            }

            get param() {
                return this.params;
            }

            ToJson() {
               return JSON.stringify({"cmd" : {"cmdid" : this.cmdid, "src" : this.src, "dst" : this.dst, "executionvariant" : this.executionvariant, "param" : this.param}});
            }

        }
        ws.onopen = function () {
            console.log('Connected');

            var text =
                    '[{ "bootloader":{"path": "c:/files/boot_test.prg"} },' +
                    '{ "ac":{"path": "c:/files/boot_test.prg"}},' +
                    '{ "gc": {"path": "c:/files/boot_test.prg", "isusb": "true"} ' +
                    '}]';

            var obj = JSON.parse(text);
            console.log(obj);

            var t = new Command(11,"web","relay","SET",obj);
            var json = t.ToJson();
            ws.send(json);
            ws.onmessage = function (e) {
                console.log('Server: ' + e.data);
            };
        };






